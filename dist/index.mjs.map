{"version":3,"sources":["../src/utils/optimizer.ts","../src/components/image.tsx"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["export interface ImageOptimizationOptions {\n  quality?: number;\n  width?: number;\n  height?: number;\n  format?: \"webp\" | \"jpeg\" | \"png\";\n}\n\nexport async function optimizeImage(\n  src: string,\n  options: ImageOptimizationOptions = {}\n): Promise<string> {\n  try {\n    const { quality = 80, width, height, format = \"webp\" } = options;\n\n    // Create a canvas element\n    const img = new Image();\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    if (!ctx) {\n      throw new Error(\"Could not get canvas context\");\n    }\n\n    // Load the image\n    await new Promise((resolve, reject) => {\n      img.onload = resolve;\n      img.onerror = reject;\n      img.src = src;\n    });\n\n    // Set canvas dimensions\n    canvas.width = width || img.width;\n    canvas.height = height || img.height;\n\n    // Draw image on canvas\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n    // Convert to WebP\n    const webpDataUrl = canvas.toDataURL(`image/${format}`, quality / 100);\n    return webpDataUrl;\n  } catch (error) {\n    console.error(\"Error optimizing image:\", error);\n    return src;\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { optimizeImage } from \"../utils/optimizer\";\n\nexport interface ImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  quality?: number;\n  priority?: boolean;\n  loading?: \"lazy\" | \"eager\";\n  placeholder?: \"blur\" | \"empty\";\n  blurDataURL?: string;\n}\n\nconst Passepartout: React.FC<ImageProps> = ({\n  src,\n  alt,\n  width,\n  height,\n  quality = 80,\n  priority = false,\n  loading = \"lazy\",\n  placeholder = \"empty\",\n  blurDataURL,\n  style,\n  className,\n  ...props\n}) => {\n  const [optimizedSrc, setOptimizedSrc] = useState<string>(src);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const optimize = async () => {\n      try {\n        setIsLoading(true);\n        const optimized = await optimizeImage(src, {\n          quality,\n          format: \"webp\",\n          width,\n          height,\n        });\n        setOptimizedSrc(optimized);\n      } catch (err) {\n        setError(\n          err instanceof Error ? err : new Error(\"Failed to optimize image\")\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    optimize();\n  }, [src, quality, width, height]);\n\n  const imageStyle: React.CSSProperties = {\n    ...style,\n    opacity: isLoading ? 0.5 : 1,\n    transition: \"opacity 0.3s ease-in-out\",\n  };\n\n  if (error) {\n    console.error(\"Image optimization error:\", error);\n    return (\n      <img\n        src={src}\n        alt={alt}\n        width={width}\n        height={height}\n        style={style}\n        className={className}\n        {...props}\n      />\n    );\n  }\n\n  return (\n    <img\n      src={optimizedSrc}\n      alt={alt}\n      width={width}\n      height={height}\n      loading={priority ? \"eager\" : loading}\n      style={imageStyle}\n      className={className}\n      {...props}\n    />\n  );\n};\n\nexport default Passepartout;\n"]}